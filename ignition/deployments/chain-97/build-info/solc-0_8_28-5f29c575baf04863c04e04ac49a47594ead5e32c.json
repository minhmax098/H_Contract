{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-5f29c575baf04863c04e04ac49a47594ead5e32c",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/RemoteHealthcareSystem.sol": "project/contracts/RemoteHealthcareSystem.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/RemoteHealthcareSystem.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\ncontract RemoteHealthcareSystem {\n\n    address public Hospital;\n\n    modifier onlyHospital() {\n        require(msg.sender == Hospital);\n        _;\n    }\n\n    constructor() {\n        Hospital = msg.sender;\n    }\n\n    //******************************************************//\n    //******************************************************//\n    //                                                      //\n    //          Paitent Register Smart Contract             //\n    //                                                      //\n    //******************************************************//\n    //******************************************************//\n\n    uint    public NumberOfPatients;\n    mapping (address => bool)   public Patient_Account_IsRegistered;\n    uint    public Patient_Id;\n\n    event Patient_Added(address _address,uint _Patient_ID,string _Patient_Name, uint8 _Patient_Age,string _Patient_Address);\n    event Patient_Modified(address _address,string _Patient_Name, uint8 _Patient_Age,string _Patient_Address);\n    event Patient_Removed(address _address);\n\n    struct Patient {\n        address Patient_Account;\n        uint    Patient_ID;\n        string  Patient_Name;\n        uint8   Patient_Age;\n        string  Patient_Address;\n    }\n\n    mapping (address => Patient) patients;\n\n    function Add_Patient(address _address,string memory _Patient_Name, uint8 _Patient_Age,string memory _Patient_Address) onlyHospital public {\n\n        require(_address != address(0));\n        require(Patient_Account_IsRegistered[_address] != true);\n        require(Doctor_Account_IsRegistered[_address] != true);\n        Patient_Account_IsRegistered[_address] = true;\n\n        Patient storage patient  = patients[_address];\n        patient.Patient_Account = _address;\n        Patient_Id++;\n        patient.Patient_ID      = Patient_Id;\n        patient.Patient_Name    = _Patient_Name;\n        patient.Patient_Age     = _Patient_Age;\n        patient.Patient_Address = _Patient_Address;\n\n        NumberOfPatients++;\n\n        emit Patient_Added(_address, Patient_Id,_Patient_Name,_Patient_Age,_Patient_Address);\n\n    }\n\n    function Modify_Patient(address _address,string memory _Patient_Name, uint8 _Patient_Age,string memory _Patient_Address) onlyHospital public {\n\n        require(Patient_Account_IsRegistered[_address] == true);\n\n        patients[_address].Patient_Name     = _Patient_Name;\n        patients[_address].Patient_Age      = _Patient_Age;\n        patients[_address].Patient_Address  = _Patient_Address;\n\n        emit Patient_Modified(_address,_Patient_Name,_Patient_Age,_Patient_Address);\n\n    }\n\n    function Remove_Patient(address _address) onlyHospital public {\n\n        require(Patient_Account_IsRegistered[_address] == true);\n\n        Patient_Account_IsRegistered[_address] = false;\n        delete patients[_address];\n        NumberOfPatients--;\n        emit Patient_Removed(_address);\n    }\n\n    function Get_Patient(address _address) view public returns (address, uint, string memory, uint8, string memory) {\n\n        require(Patient_Account_IsRegistered[_address]);\n        require((msg.sender == Hospital)||(listpatientfordoctors[msg.sender].Patient_Account_IsAuthorized[_address]==true)|| (msg.sender == _address));\n\n        return (patients[_address].Patient_Account,patients[_address].Patient_ID, patients[_address].Patient_Name, patients[_address].Patient_Age, patients[_address].Patient_Address);\n    }\n\n    //******************************************************//\n    //******************************************************//\n    //                                                      //\n    //           Doctor Register Smart Contract             //\n    //                                                      //\n    //******************************************************//\n    //******************************************************//\n\n    uint    public NumberOfDoctors;\n    mapping (address => bool) public Doctor_Account_IsRegistered;\n    uint    public Doctor_Id;\n\n    event Doctor_Added(address _address,uint _Doctor_ID,string _Doctor_Name, uint8 _Doctor_Age,string _Doctor_Address);\n    event Doctor_Modified(address _address,string _Doctor_Name, uint8 _Doctor_Age,string _Doctor_Address);\n    event Doctor_Removed(address _address);\n\n    struct Doctor {\n        address Doctor_Account;\n        uint    Doctor_ID;\n        string  Doctor_Name;\n        uint8   Doctor_Age;\n        string  Doctor_Address;\n    }\n\n    mapping (address => Doctor) doctors;\n\n    function Add_Doctor(address _address,string memory _Doctor_Name, uint8 _Doctor_Age,string memory _Doctor_Address) onlyHospital public {\n\n        require(_address != address(0));\n        require(Doctor_Account_IsRegistered[_address] != true);\n        require(Patient_Account_IsRegistered[_address] != true);\n        Doctor_Account_IsRegistered[_address] = true;\n\n        Doctor storage doctor   = doctors[_address];\n        doctor.Doctor_Account   = _address;\n        Doctor_Id++;\n        doctor.Doctor_ID        = Doctor_Id;\n        doctor.Doctor_Name      = _Doctor_Name;\n        doctor.Doctor_Age       = _Doctor_Age;\n        doctor.Doctor_Address   = _Doctor_Address;\n\n        NumberOfDoctors++;\n        emit Doctor_Added(_address, Doctor_Id,_Doctor_Name,_Doctor_Age,_Doctor_Address);\n\n    }\n\n    function Modify_Doctor(address _address,string memory _Doctor_Name, uint8 _Doctor_Age,string memory _Doctor_Address) onlyHospital public {\n\n        require(Doctor_Account_IsRegistered[_address] == true);\n\n        doctors[_address].Doctor_Name       = _Doctor_Name;\n        doctors[_address].Doctor_Age        = _Doctor_Age;\n        doctors[_address].Doctor_Address    = _Doctor_Address;\n\n        emit Doctor_Modified(_address,_Doctor_Name,_Doctor_Age,_Doctor_Address);\n\n    }\n    function Remove_Doctor(address _address) onlyHospital public {\n\n        require(Doctor_Account_IsRegistered[_address] == true);\n        Doctor_Account_IsRegistered[_address] = false;\n        delete doctors[_address];\n        emit Doctor_Removed(_address);\n    }\n    function Get_Doctor(address _address) view public returns (address, uint, string memory, uint8, string memory) {\n        require( Doctor_Account_IsRegistered[_address]);\n        require((msg.sender == Hospital)||(msg.sender == _address));\n        return (doctors[_address].Doctor_Account,doctors[_address].Doctor_ID, doctors[_address].Doctor_Name, doctors[_address].Doctor_Age, doctors[_address].Doctor_Address);\n    }\n\n    //******************************************************//\n    //******************************************************//\n    //                                                      //\n    //    Authorized Patient for Doctor Smart Contract      //\n    //                                                      //\n    //******************************************************//\n    //******************************************************//\n\n    struct ListPatientForDoctor {\n        mapping (address => bool)  Patient_Account_IsAuthorized;\n    }\n    mapping (address => ListPatientForDoctor) listpatientfordoctors;\n\n    function Authorize_Patient_For_Doctor (address _Doctor_address,address _Patient_address) onlyHospital public {\n\n        require(Patient_Account_IsRegistered[_Patient_address] == true);\n        require(Doctor_Account_IsRegistered[_Doctor_address] == true);\n\n        ListPatientForDoctor storage listpatientfordoctor = listpatientfordoctors[_Doctor_address];\n        listpatientfordoctor.Patient_Account_IsAuthorized[_Patient_address] = true;\n    }\n\n    function Cancel_Patient_For_Doctor (address _Doctor_address,address _Patient_address) onlyHospital public {\n\n        require(Patient_Account_IsRegistered[_Patient_address] == true);\n        require(Doctor_Account_IsRegistered[_Doctor_address] == true);\n\n        ListPatientForDoctor storage listpatientfordoctor = listpatientfordoctors[_Doctor_address];\n        listpatientfordoctor.Patient_Account_IsAuthorized[_Patient_address] = false;\n    }\n\n    function Get_Authorize_Patient_For_Doctor (address _Doctor_address,address _Patient_address) onlyHospital view public returns(bool) {\n\n        require(Patient_Account_IsRegistered[_Patient_address] == true);\n        require(Doctor_Account_IsRegistered[_Doctor_address] == true);\n\n        return (listpatientfordoctors[_Doctor_address].Patient_Account_IsAuthorized[_Patient_address]);\n    }\n\n    //******************************************************//\n    //******************************************************//\n    //                                                      //\n    //          Patient Monitoring Smart Contract           //\n    //                                                      //\n    //******************************************************//\n    //******************************************************//\n\n    modifier onlyPatient() {\n        require(Patient_Account_IsRegistered[msg.sender] == true);\n        _;\n    }\n\n    event Sensor_Data_Collected (address _Patient_Account, uint8 _Patient_HeartBeat,uint8 _Patient_BloodPressure,uint8 _Patient_Temperature);\n    event Alert_Patient_HeartBeat(address _address);\n    event Alert_Patient_BloodPressure(address _address);\n    event Alert_Patient_Temperature(address _address);\n\n    struct Patient_Monitoring {\n        address     Patient_Account;\n        uint8       Patient_HeartBeat;\n        uint8       Patient_BloodPressure;\n        uint8       Patient_Temperature;\n    }\n\n    mapping (address => Patient_Monitoring) patients_monitoring;\n\n    function Set_Parameters(uint8 _Patient_HeartBeat,uint8 _Patient_BloodPressure,uint8 _Patient_Temperature) onlyPatient public{\n\n        Patient_Monitoring storage patient_monitoring = patients_monitoring[msg.sender];\n        patient_monitoring.Patient_Account          = msg.sender;\n        patient_monitoring.Patient_HeartBeat        = _Patient_HeartBeat;\n        patient_monitoring.Patient_BloodPressure    = _Patient_BloodPressure;\n        patient_monitoring.Patient_Temperature      = _Patient_Temperature;\n        emit Sensor_Data_Collected (msg.sender, _Patient_HeartBeat, _Patient_BloodPressure,_Patient_Temperature);\n\n    }\n    function Get_Parameters(address _address) view public returns (address, uint8, uint8, uint8) {\n\n        require((msg.sender == Hospital)||(listpatientfordoctors[msg.sender].Patient_Account_IsAuthorized[_address]==true)|| (msg.sender == _address));\n\n        return (patients_monitoring[_address].Patient_Account,patients_monitoring[_address].Patient_HeartBeat, patients_monitoring[_address].Patient_BloodPressure, patients_monitoring[_address].Patient_Temperature);\n    }\n\n}\n"
      }
    }
  }
}
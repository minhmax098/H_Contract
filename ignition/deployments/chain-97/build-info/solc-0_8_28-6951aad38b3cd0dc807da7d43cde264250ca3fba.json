{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-6951aad38b3cd0dc807da7d43cde264250ca3fba",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/RemoteHealthcareSystem.sol": "project/contracts/RemoteHealthcareSystem.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/RemoteHealthcareSystem.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\n\r\ncontract RemoteHealthcareSystem {\r\n\r\n    address public Hospital;\r\n\r\n    modifier onlyHospital() {\r\n        require(msg.sender == Hospital);\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        Hospital = msg.sender;\r\n    }\r\n\r\n    //******************************************************//\r\n    //******************************************************//\r\n    //                                                      //\r\n    //          Paitent Register Smart Contract             //\r\n    //                                                      //\r\n    //******************************************************//\r\n    //******************************************************//\r\n\r\n    uint    public NumberOfPatients;\r\n    mapping (address => bool)   public Patient_Account_IsRegistered;\r\n    uint    public Patient_Id;\r\n\r\n    event Patient_Added(address _address,uint _Patient_ID,string _Patient_Name, uint8 _Patient_Age,string _Patient_Address);\r\n    event Patient_Modified(address _address,string _Patient_Name, uint8 _Patient_Age,string _Patient_Address);\r\n    event Patient_Removed(address _address);\r\n\r\n    struct Patient {\r\n        address Patient_Account;\r\n        uint    Patient_ID;\r\n        string  Patient_Name;\r\n        uint8   Patient_Age;\r\n        string  Patient_Address;\r\n    }\r\n\r\n    mapping (address => Patient) patients;\r\n\r\n    function Add_Patient(address _address,string memory _Patient_Name, uint8 _Patient_Age,string memory _Patient_Address) onlyHospital public {\r\n\r\n        require(_address != address(0));\r\n        require(Patient_Account_IsRegistered[_address] != true);\r\n        require(Doctor_Account_IsRegistered[_address] != true);\r\n        Patient_Account_IsRegistered[_address] = true;\r\n\r\n        Patient storage patient  = patients[_address];\r\n        patient.Patient_Account = _address;\r\n        Patient_Id++;\r\n        patient.Patient_ID      = Patient_Id;\r\n        patient.Patient_Name    = _Patient_Name;\r\n        patient.Patient_Age     = _Patient_Age;\r\n        patient.Patient_Address = _Patient_Address;\r\n\r\n        NumberOfPatients++;\r\n\r\n        emit Patient_Added(_address, Patient_Id,_Patient_Name,_Patient_Age,_Patient_Address);\r\n\r\n    }\r\n\r\n    function Modify_Patient(address _address,string memory _Patient_Name, uint8 _Patient_Age,string memory _Patient_Address) onlyHospital public {\r\n\r\n        require(Patient_Account_IsRegistered[_address] == true);\r\n\r\n        patients[_address].Patient_Name     = _Patient_Name;\r\n        patients[_address].Patient_Age      = _Patient_Age;\r\n        patients[_address].Patient_Address  = _Patient_Address;\r\n\r\n        emit Patient_Modified(_address,_Patient_Name,_Patient_Age,_Patient_Address);\r\n\r\n    }\r\n\r\n    function Remove_Patient(address _address) onlyHospital public {\r\n\r\n        require(Patient_Account_IsRegistered[_address] == true);\r\n\r\n        Patient_Account_IsRegistered[_address] = false;\r\n        delete patients[_address];\r\n        NumberOfPatients--;\r\n        emit Patient_Removed(_address);\r\n    }\r\n\r\n    function Get_Patient(address _address) view public returns (address, uint, string memory, uint8, string memory) {\r\n\r\n        require(Patient_Account_IsRegistered[_address]);\r\n        require((msg.sender == Hospital)||(listpatientfordoctors[msg.sender].Patient_Account_IsAuthorized[_address]==true)|| (msg.sender == _address));\r\n\r\n        return (patients[_address].Patient_Account,patients[_address].Patient_ID, patients[_address].Patient_Name, patients[_address].Patient_Age, patients[_address].Patient_Address);\r\n    }\r\n\r\n    //******************************************************//\r\n    //******************************************************//\r\n    //                                                      //\r\n    //           Doctor Register Smart Contract             //\r\n    //                                                      //\r\n    //******************************************************//\r\n    //******************************************************//\r\n\r\n    uint    public NumberOfDoctors;\r\n    mapping (address => bool) public Doctor_Account_IsRegistered;\r\n    uint    public Doctor_Id;\r\n\r\n    event Doctor_Added(address _address,uint _Doctor_ID,string _Doctor_Name, uint8 _Doctor_Age,string _Doctor_Address);\r\n    event Doctor_Modified(address _address,string _Doctor_Name, uint8 _Doctor_Age,string _Doctor_Address);\r\n    event Doctor_Removed(address _address);\r\n\r\n    struct Doctor {\r\n        address Doctor_Account;\r\n        uint    Doctor_ID;\r\n        string  Doctor_Name;\r\n        uint8   Doctor_Age;\r\n        string  Doctor_Address;\r\n    }\r\n\r\n    mapping (address => Doctor) doctors;\r\n\r\n    function Add_Doctor(address _address,string memory _Doctor_Name, uint8 _Doctor_Age,string memory _Doctor_Address) onlyHospital public {\r\n\r\n        require(_address != address(0));\r\n        require(Doctor_Account_IsRegistered[_address] != true);\r\n        require(Patient_Account_IsRegistered[_address] != true);\r\n        Doctor_Account_IsRegistered[_address] = true;\r\n\r\n        Doctor storage doctor   = doctors[_address];\r\n        doctor.Doctor_Account   = _address;\r\n        Doctor_Id++;\r\n        doctor.Doctor_ID        = Doctor_Id;\r\n        doctor.Doctor_Name      = _Doctor_Name;\r\n        doctor.Doctor_Age       = _Doctor_Age;\r\n        doctor.Doctor_Address   = _Doctor_Address;\r\n\r\n        NumberOfDoctors++;\r\n        emit Doctor_Added(_address, Doctor_Id,_Doctor_Name,_Doctor_Age,_Doctor_Address);\r\n\r\n    }\r\n\r\n    function Modify_Doctor(address _address,string memory _Doctor_Name, uint8 _Doctor_Age,string memory _Doctor_Address) onlyHospital public {\r\n\r\n        require(Doctor_Account_IsRegistered[_address] == true);\r\n\r\n        doctors[_address].Doctor_Name       = _Doctor_Name;\r\n        doctors[_address].Doctor_Age        = _Doctor_Age;\r\n        doctors[_address].Doctor_Address    = _Doctor_Address;\r\n\r\n        emit Doctor_Modified(_address,_Doctor_Name,_Doctor_Age,_Doctor_Address);\r\n\r\n    }\r\n    function Remove_Doctor(address _address) onlyHospital public {\r\n\r\n        require(Doctor_Account_IsRegistered[_address] == true);\r\n        Doctor_Account_IsRegistered[_address] = false;\r\n        delete doctors[_address];\r\n        emit Doctor_Removed(_address);\r\n    }\r\n    function Get_Doctor(address _address) view public returns (address, uint, string memory, uint8, string memory) {\r\n        require( Doctor_Account_IsRegistered[_address]);\r\n        require((msg.sender == Hospital)||(msg.sender == _address));\r\n        return (doctors[_address].Doctor_Account,doctors[_address].Doctor_ID, doctors[_address].Doctor_Name, doctors[_address].Doctor_Age, doctors[_address].Doctor_Address);\r\n    }\r\n\r\n    //******************************************************//\r\n    //******************************************************//\r\n    //                                                      //\r\n    //    Authorized Patient for Doctor Smart Contract      //\r\n    //                                                      //\r\n    //******************************************************//\r\n    //******************************************************//\r\n\r\n    struct ListPatientForDoctor {\r\n        mapping (address => bool)  Patient_Account_IsAuthorized;\r\n    }\r\n    mapping (address => ListPatientForDoctor) listpatientfordoctors;\r\n\r\n    function Authorize_Patient_For_Doctor (address _Doctor_address,address _Patient_address) onlyHospital public {\r\n\r\n        require(Patient_Account_IsRegistered[_Patient_address] == true);\r\n        require(Doctor_Account_IsRegistered[_Doctor_address] == true);\r\n\r\n        ListPatientForDoctor storage listpatientfordoctor = listpatientfordoctors[_Doctor_address];\r\n        listpatientfordoctor.Patient_Account_IsAuthorized[_Patient_address] = true;\r\n    }\r\n\r\n    function Cancel_Patient_For_Doctor (address _Doctor_address,address _Patient_address) onlyHospital public {\r\n\r\n        require(Patient_Account_IsRegistered[_Patient_address] == true);\r\n        require(Doctor_Account_IsRegistered[_Doctor_address] == true);\r\n\r\n        ListPatientForDoctor storage listpatientfordoctor = listpatientfordoctors[_Doctor_address];\r\n        listpatientfordoctor.Patient_Account_IsAuthorized[_Patient_address] = false;\r\n    }\r\n\r\n    function Get_Authorize_Patient_For_Doctor (address _Doctor_address,address _Patient_address) onlyHospital view public returns(bool) {\r\n\r\n        require(Patient_Account_IsRegistered[_Patient_address] == true);\r\n        require(Doctor_Account_IsRegistered[_Doctor_address] == true);\r\n\r\n        return (listpatientfordoctors[_Doctor_address].Patient_Account_IsAuthorized[_Patient_address]);\r\n    }\r\n\r\n    //******************************************************//\r\n    //******************************************************//\r\n    //                                                      //\r\n    //          Patient Monitoring Smart Contract           //\r\n    //                                                      //\r\n    //******************************************************//\r\n    //******************************************************//\r\n\r\n    modifier onlyPatient() {\r\n        require(Patient_Account_IsRegistered[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    event Sensor_Data_Collected (address _Patient_Account, uint8 _Patient_HeartBeat,uint8 _Patient_BloodPressure,uint8 _Patient_Temperature);\r\n    event Alert_Patient_HeartBeat(address _address);\r\n    event Alert_Patient_BloodPressure(address _address);\r\n    event Alert_Patient_Temperature(address _address);\r\n\r\n    struct Patient_Monitoring {\r\n        address     Patient_Account;\r\n        uint8       Patient_HeartBeat;\r\n        uint8       Patient_BloodPressure;\r\n        uint8       Patient_Temperature;\r\n    }\r\n\r\n    mapping (address => Patient_Monitoring) patients_monitoring;\r\n\r\n    function Set_Parameters(uint8 _Patient_HeartBeat,uint8 _Patient_BloodPressure,uint8 _Patient_Temperature) onlyPatient public{\r\n\r\n        Patient_Monitoring storage patient_monitoring = patients_monitoring[msg.sender];\r\n        patient_monitoring.Patient_Account          = msg.sender;\r\n        patient_monitoring.Patient_HeartBeat        = _Patient_HeartBeat;\r\n        patient_monitoring.Patient_BloodPressure    = _Patient_BloodPressure;\r\n        patient_monitoring.Patient_Temperature      = _Patient_Temperature;\r\n        emit Sensor_Data_Collected (msg.sender, _Patient_HeartBeat, _Patient_BloodPressure,_Patient_Temperature);\r\n\r\n    }\r\n    function Get_Parameters(address _address) view public returns (address, uint8, uint8, uint8) {\r\n\r\n        require((msg.sender == Hospital)||(listpatientfordoctors[msg.sender].Patient_Account_IsAuthorized[_address]==true)|| (msg.sender == _address));\r\n\r\n        return (patients_monitoring[_address].Patient_Account,patients_monitoring[_address].Patient_HeartBeat, patients_monitoring[_address].Patient_BloodPressure, patients_monitoring[_address].Patient_Temperature);\r\n    }\r\n\r\n}\r\n"
      }
    }
  }
}